645. Set Mismatch (Easy)
Input: nums = [1,2,2,4]
Output: [2,3]

解题思路1：使用HashSet，判断重复元素和1-n中缺少的数，时间复杂度O(N)，空间复杂度O(N)
public int[] findErrorNums(int[] nums) {
        Set<Integer> set = new HashSet<Integer>();
        int[] ans = new int[2];
        for(int i = 0;i<nums.length;i++){
            if(!set.add(nums[i])){
                ans[0] = nums[i];
            }
        }
        for(int i = 1;i<=nums.length;i++){
            if(!set.contains(i)){
                ans[1] = i;
                break;
            }
        }
        return ans;
    }
    
解题思路2：通过使当前位与后面的数字交换使每个数在正确的位置上
public int[] findErrorNums(int[] nums) {
        for(int i = 0;i<nums.length;i++){
            while(nums[i]!=i+1&&nums[nums[i]-1]!=nums[i])
                swap(nums,i,nums[i]-1);
        }
        for(int i = 0;i<nums.length;i++){
            if(nums[i]!=i+1)
                return new int[]{nums[i],i+1};
        }
        return null;
    }
    public void swap(int[] nums,int i,int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
