155. Min Stack (Easy)
要求：线性复杂度求出栈中最小值

解题思路：建立一个顶部元素代表当前栈中元素最小值的栈，与当前栈一起更新，返回顶部元素即为最小值。
class MinStack {
    Stack<Integer> stack = new Stack<Integer>();
    Stack<Integer> minstack = new Stack<Integer>();
    int min = Integer.MAX_VALUE;
    /** initialize your data structure here. */
    public MinStack() {
        
    }
    
    public void push(int x) {
        stack.push(x);
        min = Math.min(min,x);
        minstack.push(min);
    }
    
    public void pop() {
        stack.pop();
        minstack.pop();
        min = minstack.isEmpty()?Integer.MAX_VALUE:minstack.peek();
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return min;
    }
}


最小值队列：先用栈搭起一个队列，再按上述方法求解。
class MinQueue{
    Stack<Integer> in = new Stack<Integer>();
    Stack<Integer> out = new Stack<Integer>();
    Stack<Integer> minstack = new Stack<Integer>();
    int min = Integer.MAX_VALUE;
    
    public MinQueue(){
    }
    
    public void push(int x){
        in.push(x);
        min = Math.min(min,x);
        minstack.push(x);
    }
    
    public void poll(){
        in2out();
        out.pop();
        minstack.pop();
        min = minstack.isEmpty()?Integer.MAX_VALUE:minstack.peek();
    }
    
    private void in2out(){
        if(!out.isEmpty()){
            while(!in.isEmpty())
                out.push(in.pop());
        }
    }
    
    public int peek(){
        in2out();
        return out.peek();
    }
    
    public int getMin(){
        return min;
    }
}
