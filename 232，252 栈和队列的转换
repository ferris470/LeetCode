232. Implement Queue using Stacks (Easy)

解题思路：使用两个栈（in，out）来实现队列，注意要在输出栈没有元素的时候才可以把输入栈的元素压进去，否则会改变队头元素
class MyQueue {
    Stack<Integer> in = new Stack<Integer>();
    Stack<Integer> out = new Stack<Integer>();
    /** Initialize your data structure here. */
    public MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        in.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        in2out();
        return out.pop();
    }
    
    /** Get the front element. */
    public int peek() {
        in2out();
        return out.peek();
    }
    private void in2out(){
        if(out.isEmpty()){
            while(!in.isEmpty()){
                int temp = in.pop();
                out.push(temp);
            }
        }
    }
        
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return out.isEmpty()&&in.isEmpty();
    }
}


225. Implement Stack using Queues (Easy)
用队列实现栈

解题思路：队列添加元素会默认添加到队尾，为了添加到队首，需要另外一个临时队列存储之前队列里的元素，添加新元素后再把临时队列里的元素添加回去
class MyStack {
    Queue<Integer> queue = new LinkedList<Integer>();
    Queue<Integer> temp = new LinkedList<Integer>();
    /** Initialize your data structure here. */
    public MyStack() {
        
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        while(!queue.isEmpty())
            temp.add(queue.poll());
        queue.add(x);
        while(!temp.isEmpty())
            queue.add(temp.poll());
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        return queue.poll();
    }
    
    /** Get the top element. */
    public int top() {
        return queue.peek();
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
        return queue.isEmpty()&&temp.isEmpty();
    }
}
