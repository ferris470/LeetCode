417. Pacific Atlantic Water Flow (Medium)
Given the following 5x5 matrix:

  Pacific ~   ~   ~   ~   ~
       ~  1   2   2   3  (5) *
       ~  3   2   3  (4) (4) *
       ~  2   4  (5)  3   1  *
       ~ (6) (7)  1   4   5  *
       ~ (5)  1   1   2   4  *
          *   *   *   *   * Atlantic

Return:
[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).
左边和上边是太平洋，右边和下边是大西洋，内部的数字代表海拔，海拔高的地方的水能够流到低的地方，求解水能够流到太平洋和大西洋的所有位置。

解题思路：从可以进入太平洋和大西洋的位置作为入口，遍历周围的元素能不能进入
如果从每个位置判断能否进入两个大洋，栈内存会不足
class Solution {
    int m,n;
	int[][] matrix;
	int[][] dir = {{1,0},{-1,0},{0,1},{0,-1}};
	public List<int[]> pacificAtlantic(int[][] matrix)
	{
        List<int[]> ans = new ArrayList<int[]>();
        m = matrix.length;
        if(m==0)
            return ans;
        n = matrix[0].length;
        this.matrix = matrix;
        boolean[][] canReachP = new boolean[m][n];
        boolean[][] canReachA = new boolean[m][n];
        for(int i = 0;i<m;i++){
            dfs(i,0,canReachP);
            dfs(i,n-1,canReachA);
        }
        for(int i = 0;i<n;i++){
            dfs(0,i,canReachP);
            dfs(m-1,i,canReachA);
        }
        for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                if(canReachP[i][j]&&canReachA[i][j])
                    ans.add(new int[]{i,j});
            }
        }
        return ans;
	}
    public void dfs(int r,int c,boolean[][] canReach){
        if(canReach[r][c])
            return;
        canReach[r][c] = true;
        for(int[] d:dir){
            int nextR = r+d[0];
            int nextC = c+d[1];
            if(nextR<0||nextR>=m||nextC<0||nextC>=n||matrix[r][c]>matrix[nextR][nextC])
                continue;
            dfs(nextR,nextC,canReach);
        }
    }
}
