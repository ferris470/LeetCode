强盗在环形街区抢劫
213. House Robber II (Medium)

解题思路：分为不抢第一个和不抢最后一个两种情况，转化为普通抢劫问题，找到最大的结果
public int rob(int[] nums) {
        int n = nums.length;
        if(n==0)
            return 0;
        if(n==1)
            return nums[0];
        if(n==2)
            return Math.max(nums[0],nums[1]);
        int[] dp = new int[n];
        //不抢第一个
        dp[1] = nums[1];
        for(int i = 2;i<n;i++){
            dp[i] = Math.max(dp[i-1],dp[i-2]+nums[i]);
        }
        int max = dp[n-1];
        //不抢最后一个
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0],nums[1]);
        for(int i = 2;i<n-1;i++){
            dp[i] = Math.max(dp[i-1],dp[i-2]+nums[i]);
        }
        max = Math.max(max,dp[n-2]);
        return max;
    }
