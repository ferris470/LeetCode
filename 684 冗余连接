684. Redundant Connection (Medium)
Input: [[1,2], [1,3], [2,3]]
Output: [2,3]
Explanation: The given undirected graph will be like this:
  1
 / \
2 - 3
题目描述：有一系列的边连成的图，找出一条边，移除它之后该图能够成为一棵树。

解题思路：节点的数目最多比边的数目多1，每遍历一条边，就加入一个新的节点，使其他之前遍历过的与新节点连通的节点的值与新节点置为相同，
如果一条边上两个节点的数值相同，证明这两个节点已经连通，那么这条边的存在就会构成环，是多余的边
public int[] findRedundantConnection(int[][] edges) {
        int n = edges.length;
        UF uf = new UF(n);
        for(int[] edge:edges){
            int u = edge[0],v = edge[1];
            if(uf.connect(u,v)){
                return edge;
            }
            uf.union(u,v);
        }
        return new int[]{-1,-1};
    }
    private class UF{
        int[] id;
        UF(int n){
            id = new int[n+1];
            for(int i = 0;i<id.length;i++)
                id[i] = i;
        }
        public boolean connect(int u,int v){
            if(id[u]==id[v])
                return true;
            return false;
        }
        public void union(int u,int v){
            int idu = id[u];
            int idv = id[v];
            for(int i = 0;i<id.length;i++){
                if(id[i]==idu)
                    id[i] = idv;
            }
        }
    }
